import io.gitlab.arturbosch.detekt.Detekt

buildscript {
    ext {
        kotlin_version = '1.8.20'
        compose_version = '1.5.0-alpha02'
        compose_compiler_version = '1.4.5'
    }
    dependencies {
        classpath 'com.google.dagger:hilt-android-gradle-plugin:2.44.2'
        classpath 'com.squareup.sqldelight:gradle-plugin:1.5.4'
        classpath 'com.google.gms:google-services:4.3.15'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.9.5'
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:1.22.0"
    }

    project.ext.set("app_version_code", 81)
    project.ext.set("app_version_name", "0.0.88")

}// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    id 'com.android.application' version '8.0.0' apply false
    id 'com.android.library' version '8.0.0' apply false
    id 'org.jetbrains.kotlin.android' version "$kotlin_version" apply false
    id 'com.squareup.sqldelight' version '1.5.4' apply false
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin' version '2.0.1' apply false
//    id "com.bnorm.power.kotlin-power-assert" version "0.12.2" apply false
    id "org.sonarqube" version "3.4.0.2513"
    id "io.gitlab.arturbosch.detekt" version "1.22.0-RC3" apply true
    id "com.github.ben-manes.versions" version "0.44.0" apply true
    id "nl.littlerobots.version-catalog-update" version "0.7.0" apply true
}


def projectSource = file(projectDir)
def configFile = files("$rootDir/config/detekt/detekt.yml")
def kotlinFiles = "**/*.kt"
def resourceFiles = "**/resources/**"
def buildFiles = "**/build/**"

tasks.register("detektAll", Detekt) {
    def autoFix = project.hasProperty('detektAutoFix')

    description = "Custom DETEKT build for all modules"
    parallel = true
    ignoreFailures = false
    autoCorrect = autoFix
    buildUponDefaultConfig = true
    setSource(projectSource)
    config.setFrom(configFile)
    include(kotlinFiles)
    exclude(resourceFiles, buildFiles)
    reports {
        html.enabled = true
        xml.enabled = false
        txt.enabled = false
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

sonarqube {
    properties {
        property "sonar.projectKey", "savvasdalkitsis_uhuruphotos-android"
        property "sonar.organization", "savvasdalkitsis"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

subprojects {
    if (name == "app") {
        apply plugin: "com.android.application"
    } else {
        apply plugin: "com.android.library"
    }

//    apply plugin: "com.bnorm.power.kotlin-power-assert"
    apply plugin: 'org.jetbrains.kotlin.android'
    apply plugin: 'kotlin-kapt'

    android {
        compileSdk 33

        defaultConfig {
            minSdk 23
            targetSdk 33

            testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        }
        testFixtures {
            enable = true
        }
        buildTypes {
            release {
                minifyEnabled false
            }
        }
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_17
            targetCompatibility JavaVersion.VERSION_17
        }
        kotlinOptions {
            jvmTarget = '17'
        }
    }

    dependencies {
        kapt "com.google.dagger:hilt-compiler:2.45"
        kapt "androidx.hilt:hilt-compiler:1.0.0"
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            freeCompilerArgs += "-opt-in=com.google.accompanist.permissions.ExperimentalPermissionsApi"
            freeCompilerArgs += "-opt-in=androidx.compose.animation.ExperimentalAnimationApi"
            freeCompilerArgs += "-opt-in=androidx.compose.animation.graphics.ExperimentalAnimationGraphicsApi"
            freeCompilerArgs += "-opt-in=androidx.compose.foundation.ExperimentalFoundationApi"
            freeCompilerArgs += "-opt-in=androidx.compose.foundation.layout.ExperimentalLayoutApi"
            freeCompilerArgs += "-opt-in=androidx.compose.material.ExperimentalMaterialApi"
            freeCompilerArgs += "-opt-in=androidx.compose.material3.windowsizeclass.ExperimentalMaterial3WindowSizeClassApi"
            freeCompilerArgs += "-opt-in=androidx.compose.ui.ExperimentalComposeUiApi"
            freeCompilerArgs += "-opt-in=coil.annotation.ExperimentalCoilApi"
            freeCompilerArgs += "-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"
            freeCompilerArgs += "-opt-in=kotlinx.coroutines.FlowPreview"
            freeCompilerArgs += "-Xcontext-receivers"
        }
    }
}