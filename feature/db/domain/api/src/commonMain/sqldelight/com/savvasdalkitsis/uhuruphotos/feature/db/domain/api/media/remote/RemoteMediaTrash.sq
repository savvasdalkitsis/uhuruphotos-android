CREATE TABLE remoteMediaTrash (
  id TEXT NOT NULL PRIMARY KEY ,
  dominantColor TEXT,
  url TEXT NOT NULL,
  location TEXT,
  date TEXT,
  birthTime TEXT,
  aspectRatio REAL AS kotlin.Float,
  type TEXT,
  videoLength TEXT,
  rating INTEGER AS kotlin.Int,
  containerId TEXT NOT NULL,

  FOREIGN KEY (containerId) REFERENCES remoteMediaCollections(id)
);

insert:
INSERT OR REPLACE INTO remoteMediaTrash VALUES ?;

count:
SELECT count(id) FROM remoteMediaTrash;

clear:
DELETE FROM remoteMediaTrash;

delete:
DELETE FROM remoteMediaTrash WHERE id = :id;

moveToSummaries {
BEGIN TRANSACTION;
INSERT OR REPLACE INTO remoteMediaItemSummary SELECT * FROM remoteMediaTrash WHERE id = :id;
DELETE FROM remoteMediaTrash WHERE id = :id;
COMMIT;
}

getTrash:
SELECT
 remoteMediaCollections.id,
 remoteMediaCollections.date AS albumDate,
 remoteMediaCollections.location AS albumLocation,
 remoteMediaTrash.id AS photoId,
 remoteMediaTrash.dominantColor,
 remoteMediaTrash.rating,
 remoteMediaTrash.aspectRatio,
 remoteMediaTrash.type
FROM remoteMediaCollections
LEFT JOIN remoteMediaTrash ON remoteMediaCollections.id = remoteMediaTrash.containerId
GROUP BY remoteMediaTrash.id
ORDER BY remoteMediaTrash.date DESC;