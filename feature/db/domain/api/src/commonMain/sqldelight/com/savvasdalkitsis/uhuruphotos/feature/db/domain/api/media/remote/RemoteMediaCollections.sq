CREATE TABLE remoteMediaCollections (
    id TEXT NOT NULL PRIMARY KEY,
    date TEXT,
    location TEXT,
    rating INTEGER AS kotlin.Int,
    incomplete INTEGER AS kotlin.Boolean NOT NULL,
    numberOfItems INTEGER AS kotlin.Int NOT NULL
);

get:
SELECT * FROM remoteMediaCollections WHERE id = :id;

getRemoteMediaCollections:
SELECT
 remoteMediaCollections.id,
 remoteMediaCollections.date AS albumDate,
 remoteMediaCollections.location AS albumLocation,
 summary.id AS photoId,
 summary.dominantColor,
 summary.rating,
 summary.aspectRatio,
 summary.type,
 details.gpsLat,
 details.gpsLon
FROM remoteMediaCollections
LEFT JOIN remoteMediaItemSummary AS summary ON remoteMediaCollections.id = summary.containerId
LEFT JOIN remoteMediaItemDetails AS details ON summary.id = details.imageHash
WHERE
    CASE WHEN :includeNoDates
        THEN 1
        ELSE albumDate NOT NULL
    END
    AND
    CASE WHEN :includeDates
        THEN 1
        ELSE albumDate IS NULL
    END
    AND
    CASE WHEN :onlyVideos
        THEN summary.type == 'video'
        ELSE 1
    END
GROUP BY summary.id
ORDER BY summary.date DESC
LIMIT :limit;

clearAll:
DELETE FROM remoteMediaCollections;

insert:
INSERT OR REPLACE INTO remoteMediaCollections VALUES ?;

insertIfMissing:
INSERT OR IGNORE INTO remoteMediaCollections VALUES ?;

remoteMediaCollectionCount:
SELECT count(id) FROM remoteMediaCollections;